<?php

namespace UnitTest;

use PHPUnit\Framework\TestCase;
use VmApp\Domain\Model\CoinStock\Coin;
use VmApp\Domain\Model\CoinStock\CoinStock;
use VmApp\Domain\Model\CoinStock\CoinStockId;
use VmApp\Domain\Model\Sales\MoneyChangeCalculator;
use VmApp\Domain\Model\Sales\SalesCoinStock;

class MoneyChangeCalculatorTest extends TestCase
{
    var array $coinStock;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->coinStock = [
            new CoinStock(id: new CoinStockId(), coin: new Coin(0.05), amount: 10),
            new CoinStock(id: new CoinStockId(), coin: new Coin(0.10), amount: 10),
            new CoinStock(id: new CoinStockId(), coin: new Coin(0.25), amount: 10),
            new CoinStock(id: new CoinStockId(), coin: new Coin(1.0), amount: 15)
        ];
    }

    public function testReturnCoinsToUserWasOk()
    {

        $changeCalculatorService = new MoneyChangeCalculator();
        $orderCoinStock = [];
        foreach ($this->coinStock as $item) {
            $orderCoinStock [] = new SalesCoinStock($item->id(), $item->coin()->value(), $item->amount());
        }
        list($wasChangedOk, $change) = $changeCalculatorService->calculateChange(1.0, 4.5, $orderCoinStock);
        $this->assertTrue($wasChangedOk);
        $this->assertCount(5, $change);

    }

    public function testReturnZeroCoinsToUserWasOk()
    {

        $changeCalculatorService = new MoneyChangeCalculator();
        $orderCoinStock = [];
        foreach ($this->coinStock as $item) {
            $orderCoinStock [] = new SalesCoinStock($item->id(), $item->coin()->value(), $item->amount());
        }
        list($wasChangedOk, $change) = $changeCalculatorService->calculateChange(1.50, 1.50, $orderCoinStock);
        $this->assertTrue($wasChangedOk);
        $this->assertCount(0, $change);

    }

    public function testReturnTwoCoinsToUserWasOk()
    {

        $changeCalculatorService = new MoneyChangeCalculator();
        $orderCoinStock = [];
        foreach ($this->coinStock as $item) {
            $orderCoinStock [] = new SalesCoinStock($item->id(), $item->coin()->value(), $item->amount());
        }
        list($wasChangedOk, $change) = $changeCalculatorService->calculateChange(0.65, 1.0, $orderCoinStock);
        $this->assertTrue($wasChangedOk);
        $this->assertCount(2, $change);

    }
}